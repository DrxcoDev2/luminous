
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a given team
    function isTeamOwner(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }

    // Rules for user settings
    match /userSettings/{userId} {
      // Anyone can look up a user's settings (e.g., to find their email to invite them)
      allow read: if isSignedIn();

      // Users can update their own settings.
      // A team owner can also update the teamId of another user.
      allow write: if isSignedIn() && (
        request.auth.uid == userId ||
        (
          request.resource.data.keys().hasOnly(['teamId']) &&
          ( isTeamOwner(request.resource.data.teamId) || isTeamOwner(resource.data.teamId) )
        )
      );
    }

    // Rules for teams
    match /teams/{teamId} {
      // A user can read a team's data if their UID is in the members list
      allow read: if isSignedIn() && request.auth.uid in resource.data.members.map(member => member.uid);

      // Only the owner of the team can update it (add/remove members)
      allow update: if isTeamOwner(teamId);

      // No one can create or delete teams directly through client-side code
      allow create, delete: if false;
    }

    // Rules for clients
    match /clients/{clientId} {
      // A user can manage a client if they are the creator,
      // or if the client belongs to a team they are a member of.
      allow read, write, delete: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        (
          resource.data.teamId != null &&
          request.auth.uid in get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.members.map(member => member.uid)
        )
      );

      // A user can create a client if they are signed in.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }
    
    // Rules for client notes
    match /clients/{clientId}/notes/{noteId} {
        // Inherit permissions from the parent client document
        allow read, write, delete: if isSignedIn() && (
            get(/databases/$(database)/documents/clients/$(clientId)).data.userId == request.auth.uid ||
            (
                get(/databases/$(database)/documents/clients/$(clientId)).data.teamId != null &&
                request.auth.uid in get(/databases/$(database)/documents/teams/$(get(/databases/$(database)/documents/clients/$(clientId)).data.teamId)).data.members.map(member => member.uid)
            )
        );
        allow create: if isSignedIn();
    }

    // Rules for feedback
    match /feedback/{feedbackId} {
      // Only the admin user can read feedback
      allow read: if isSignedIn() && request.auth.token.email == 'cristianmupe2021@gmail.com';
      // Any signed-in user can create feedback
      allow create: if isSignedIn();
      // No one can update or delete feedback
      allow update, delete: if false;
    }

    // Rules for mail collection (for sending emails)
    match /mail/{docId} {
      // Only the backend (via a Cloud Function, which uses admin credentials) can create mail documents
      allow create: if isSignedIn();
      // No one can read, update, or delete emails from the client
      allow read, update, delete: if false;
    }
  }
}
