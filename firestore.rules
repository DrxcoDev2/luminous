rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a team
    function isTeamOwner(teamId, userId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == userId;
    }

    // Rules for user settings
    match /userSettings/{userId} {
      // Any authenticated user can read user settings (needed to find users by email to invite)
      allow read: if request.auth != null;

      // A user can create their own settings document.
      allow create: if request.auth.uid == userId;

      // A user can update their own settings.
      // Additionally, allow updating ONLY the teamId field if the requesting user is the owner of that team.
      // This is crucial for adding/removing members from a team.
      allow update: if request.auth.uid == userId ||
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamId']) && 
                      isTeamOwner(request.resource.data.teamId, request.auth.uid));
    }

    // Rules for clients
    match /clients/{clientId} {
      // Allow read/create/update/delete if the user is the owner of the client
      // or if the client belongs to a team the user is a member of.
      allow read, write: if request.auth.uid == resource.data.userId ||
                         (resource.data.teamId != null && get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.members.hasAny([request.auth.uid]));

      // When creating a new client
      allow create: if request.auth.uid == request.resource.data.userId;
      
      match /notes/{noteId} {
        // Allow full access to notes if the user has access to the parent client.
        allow read, write: if request.auth.uid == get(/databases/$(database)/documents/clients/$(clientId)).data.userId ||
                           (get(/databases/$(database)/documents/clients/$(clientId)).data.teamId != null && 
                            get(/databases/$(database)/documents/teams/$(get(/databases/$(database)/documents/clients/$(clientId)).data.teamId)).data.members.hasAny([request.auth.uid]));
      }
    }

    // Rules for teams
    match /teams/{teamId} {
      // Only the team owner can read, update, or delete the team document.
      allow read, update, delete: if request.auth.uid == resource.data.ownerId;
      
      // A user can create a team if they set themselves as the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
    }

    // Rules for feedback
    match /feedback/{feedbackId} {
      // Any authenticated user can create feedback.
      allow create: if request.auth != null;
      // Only the admin can read feedback.
      allow read: if get(/databases/$(database)/documents/userSettings/$(request.auth.uid)).data.email == 'cristianmupe2021@gmail.com';
    }

    // Rules for mail
    match /mail/{mailId} {
      // Allow any authenticated user to create (send) an email.
      allow create: if request.auth != null;
    }
  }
}
