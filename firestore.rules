rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Check if the requesting user is the owner of a specific team.
    function isTeamOwner(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }

    // Check if the write operation only affects the 'teamId' field.
    function isOnlyChangingTeamId() {
      return request.resource.data.keys().hasOnly(['teamId']);
    }

    // --- Collection Rules ---

    match /clients/{clientId} {
      allow read, write: if isSignedIn(); // Simplified for now, can be tightened later
    }

    match /feedback/{feedbackId} {
      allow read, write: if isSignedIn();
    }

    match /mail/{mailId} {
      allow create: if isSignedIn();
    }

    match /teams/{teamId} {
      allow read: if isSignedIn();
      // Allow update only if the user is the team owner.
      allow update: if isTeamOwner(teamId);
      // No one can create or delete teams directly except through backend logic.
      allow create, delete: if false;
    }

    match /userSettings/{userId} {
      allow read: if isSignedIn();

      // Allow write under two conditions:
      // 1. The user is updating their own document.
      // 2. The user is a team owner modifying *only* the 'teamId' of another user.
      allow write: if isUser(userId) ||
                   (isSignedIn() && isTeamOwner(request.resource.data.teamId) && isOnlyChangingTeamId()) ||
                   (isSignedIn() && isTeamOwner(resource.data.teamId) && isOnlyChangingTeamId());
    }
  }
}
