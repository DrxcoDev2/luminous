rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get a user's role in a specific team
    function getTeamRole(teamId, userId) {
      let members = get(/databases/$(database)/documents/teams/$(teamId)).data.members;
      let member = members.filter(m => m.uid == userId)[0];
      return member.role;
    }
    
    // Helper function to check if a user is the owner of a team
    function isTeamOwner(teamId, userId) {
        return getTeamRole(teamId, userId) == 'owner';
    }

    // Helper function to check if a user is a member of a team
    function isTeamMember(teamId, userId) {
        let members = get(/databases/$(database)/documents/teams/$(teamId)).data.members;
        return userId in members.map(m => m.uid);
    }

    // --- Collections ---
    
    match /clients/{clientId} {
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      
      // Allow read, update, delete if user is a member of the client's team
      allow read, update, delete: if request.auth != null && isTeamMember(resource.data.teamId, request.auth.uid);
    }

    match /feedback/{feedbackId} {
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      // Admin-only access for read, update, delete
      allow read, update, delete: if request.auth != null && request.auth.token.email == 'cristianmupe2021@gmail.com';
    }

    match /mail/{mailId} {
      // Only allow creating mail documents. Reading/updating/deleting is handled by extensions/server-side code.
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }

    match /teams/{teamId} {
      // Any authenticated user can create a team
      allow create: if request.auth != null;
      // Only the owner can read, update, or delete the team document
      allow read, update, delete: if request.auth != null && isTeamOwner(teamId, request.auth.uid);
    }

    match /userSettings/{userId} {
      // A user can read/write to their own settings document
      allow read, write: if request.auth.uid == userId;

      // A team owner can update another user's teamId IF they are adding that user to their team.
      // This is a more complex rule to ensure security.
      allow update: if request.auth.uid != null &&
                      // The field being changed must be 'teamId'
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamId']) &&
                      // The person making the request must be the owner of the new teamId being assigned
                      isTeamOwner(request.resource.data.teamId, request.auth.uid);
    }
  }
}
